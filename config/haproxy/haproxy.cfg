global
        #log /dev/log   local0
        #log /dev/log   local1 notice
        log stdout format raw local0 info
        chroot /var/lib/haproxy
        stats socket /run/haproxy-admin.sock mode 660 level admin expose-fd listeners
        stats timeout 30s
        user haproxy
        group haproxy
        daemon

        # Default SSL material locations
        ca-base /etc/ssl/certs
        crt-base /etc/ssl/private

        # intermediate configuration
        # generated 2021-10-05, Mozilla Guideline v5.6, HAProxy 2.1, OpenSSL 1.1.1k, intermediate configuration
        # https://ssl-config.mozilla.org/#server=haproxy&version=2.1&config=intermediate&openssl=1.1.1k&guideline=5.6
        ssl-default-bind-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384
        ssl-default-bind-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256
        ssl-default-bind-options prefer-client-ciphers no-sslv3 no-tlsv10 no-tlsv11 no-tls-tickets

        ssl-default-server-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384
        ssl-default-server-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256
        ssl-default-server-options no-sslv3 no-tlsv10 no-tlsv11 no-tls-tickets

defaults
        log     global
        mode    http
        option  httplog
        option  dontlognull
        timeout connect 5000
        timeout client  50000
        timeout server  50000
        errorfile 400 /etc/haproxy/errors/400.http
        errorfile 403 /etc/haproxy/errors/403.http
        errorfile 408 /etc/haproxy/errors/408.http
        errorfile 500 /etc/haproxy/errors/500.http
        errorfile 502 /etc/haproxy/errors/502.http
        errorfile 503 /etc/haproxy/errors/503.http
        errorfile 504 /etc/haproxy/errors/504.http

        #Slowloris Protection
        timeout http-request 10s
        option http-buffer-request

frontend stats
# Página de status do haproxy acessível em: http://ip:8404/stats
        bind *:8404
        stats enable
        stats uri /stats
        stats refresh 10s
        stats admin if LOCALHOST
        stats auth admin:P1ssw@rd

frontend web-interno
        bind   :80
        acl domain hdr(host) caminhointernoservicos
        use_backend api.programadegestao.localhost if domain

frontend web-secure

        # Frontend listen port - 8000
        bind    :8000
        # Frontend listen port - 443 (quando configurado devidamente o certificado)
        #bind    :443 ssl crt /path/to/certificado.pem alpn h2,http/1.1

        ##Forçar SSL (quando configurado devidamente o certificado)
        #redirect scheme https code 301 if !{ ssl_fc }
        # Configuração de HSTS (quando configurado devidamente o certificado)
        # HSTS (63072000 seconds)
        #http-response set-header Strict-Transport-Security max-age=63072000 

        # Definições de segurança
        # Não aceita mais de 10 conexões concorrentes ou 10 conexões em 3 segundos para o mesmo ip
        tcp-request connection reject if { src_conn_rate(Abuse) ge 10 }
        tcp-request connection reject if { src_conn_cur(Abuse) ge 10 }
        tcp-request connection track-sc1 src table Abuse

        # No modo http a seção ABUSE funciona dependendo do src ip
        tcp-request content reject if { src_get_gpc0(Abuse) gt 0 }
        acl abuse src_http_req_rate(Abuse) ge 100
        acl flag_abuser src_inc_gpc0(Abuse) ge 0
        acl scanner src_http_err_rate(Abuse) gt 10
        # Retorna 403 para o "abuser" e marca tcp-reject para a próxima requisição
        http-request deny if abuse flag_abuser
        http-request deny if scanner flag_abuser

        # ACLs para rotas para os backends
        # Configurando o nome do dominio/host para programadegestao.localhost (mudar de acordo com o ambiente do órgão)
        acl domain hdr(host) programadegestao.localhost
        
        # Define o gateway como backend se a url digitada pelo usuário coincidir com o domain
        # e se a URL iniciar com /gateway
        acl is_gateway path_beg /gateway
        use_backend gateway.programadegestao.localhost if domain is_gateway
        
        # para os outros casos se coincidir o host irá para a app
        use_backend app.programadegestao.localhost if domain

        # Enable send X-Forwarded-For header (Util para saber o src_ip no container app)
        option             forwardfor
        option             http-keep-alive

# Define backends
backend api.programadegestao.localhost
        # Nega a requisição se a origem não for originada do gateway
        http-request deny if !{ src api-gateway }
        # Altera o caminho da requição de acordo com o prefixo: /SISGP/api/
        http-request set-path %[path,regsub(^/SISGP/api/,/)]
        balance            roundrobin
        # Direcionando a requisição para o serviço web-api
        server             web-api-service web-api:80 check

backend gateway.programadegestao.localhost
        http-request set-path %[path,regsub(^/gateway/,/)]
        # Altera o caminho da requição de acordo com o prefixo /gateway
        balance            roundrobin
        # Direcionando a requisição para o serviço api-gateway
        server             api-gateway-service api-gateway:80 check

backend app.programadegestao.localhost
        # Altera o caminho da requição de acordo com o prefixo /safe/sisgp/programagestao/app/
        http-request set-path %[path,regsub(^/safe/sisgp/programagestao/app/,/)]
        balance            roundrobin
        # Direcionando a requisição para o serviço web-app
        server             web-app-service web-app:80 check

# Armazena toda informação de abuso em uma stick-table.
backend Abuse
        stick-table type ip size 1m expire 30m store conn_rate(3s),conn_cur,gpc0,http_req_rate(10s),http_err_rate(20s)
